# -*- coding: utf-8 -*-
"""RAG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wqq5c10FsjranCZTm6pnvZXGoyteTvqu
"""

# Install required packages
!pip install python-dotenv langchain PyPDF2 faiss-cpu sentence-transformers openai

pip install langchain-community

from dotenv import load_dotenv
from PyPDF2 import PdfReader
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import FAISS
from langchain.prompts import PromptTemplate
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationalRetrievalChain
from langchain.chat_models import ChatOpenAI

import os
from google.colab import files

os.environ['OPENAI_API_KEY'] = "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"

# Custom prompt template
custom_template = """Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question, in its original language.
Chat History:
{chat_history}
Follow Up Input: {question}
Standalone question:"""

CUSTOM_QUESTION_PROMPT = PromptTemplate.from_template(custom_template)

# Extract text from uploaded PDFs
def get_pdf_text(pdf_files):
    text = ""
    for pdf_file in pdf_files:
        pdf_reader = PdfReader(pdf_file)
        for page in pdf_reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text
    return text

# Split text into chunks
def get_chunks(raw_text):
    text_splitter = CharacterTextSplitter(
        separator="\n",
        chunk_size=1000,
        chunk_overlap=200,
        length_function=len
    )
    chunks = text_splitter.split_text(raw_text)
    return chunks

# Create vectorstore
def get_vectorstore(chunks):
    embeddings = HuggingFaceEmbeddings(
        model_name="sentence-transformers/all-MiniLM-L6-v2",
        model_kwargs={'device': 'cpu'}
    )
    vectorstore = FAISS.from_texts(texts=chunks, embedding=embeddings)
    return vectorstore

# Create conversational chain
def get_conversation_chain(vectorstore):
    llm = ChatOpenAI(temperature=0.2)
    memory = ConversationBufferMemory(
        memory_key="chat_history",
        return_messages=True,
        output_key="answer"
    )
    conversation_chain = ConversationalRetrievalChain.from_llm(
        llm=llm,
        retriever=vectorstore.as_retriever(),
        condense_question_prompt=CUSTOM_QUESTION_PROMPT,
        memory=memory
    )
    return conversation_chain

# Upload files
uploaded = files.upload()

# Get list of uploaded filenames
pdf_files = list(uploaded.keys())

print("Uploaded files:", pdf_files)

# Extract text
raw_text = get_pdf_text(pdf_files)

# Split into chunks
chunks = get_chunks(raw_text)

# Create vectorstore
vectorstore = get_vectorstore(chunks)

# Create conversational chain
conversation = get_conversation_chain(vectorstore)

print("Setup complete âœ…")

# Example: ask a question
question = "What is the summary of the PDF?"
response = conversation({'question': question})
print("Answer:", response['answer'])

'type': 'insufficient_quota'